scalar Date

type Query {
  running: String!

  match(id: ID): Match
  matchWithPlayer(playerID: ID): Match
  matches: [Match!]!

  history(playerID: ID!, after: Date, before: Date): [Match]!
}

type Mutation {
  enterQueue(playerID: ID!, playerRating: Int!): Status!
  leaveQueue(playerID: ID!): Status!

  updateMatch(id: ID!, state: String!, move: String!): Status!
}

type Status {
  success: Boolean!
  message: String!
}

type Match {
  id: ID!
  type: String!

  player1ID: ID!
  player2ID: ID

  status: String!
  winner: String!

  toMove: Boolean!
  state: String!
  moves: [String]!

  startedAt: Date!
  finishedAt: Date
}
